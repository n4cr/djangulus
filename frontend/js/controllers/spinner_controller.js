import {Controller} from 'stimulus';

export default class extends Controller {
    /*
    Show a loading spinner. If no URL is provided, directly embed an SVG
     */
    static targets = ['container']
    static values = {
        url: String, // SVG url
        size: Number, // With and Height
        loading: Boolean
    }

    connect() {
        const size = this.hasSizeValue ? this.sizeValue : 40;
        if (this.hasIconValue) {
            const img = document.createElement('img')
            img.src = this.urlValue;
            this.containerTarget.appendChild(img);
        } else {
            this.urlValue = `
           <?xml version="1.0" encoding="utf-8"?>
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" style="margin: auto; background: rgba(255, 255, 255, 0) none repeat scroll 0% 0%; display: block; shape-rendering: auto;" width="${size}px" height="${size}px" viewBox="0 0 100 100" preserveAspectRatio="xMidYMid">
<path d="M10 50A40 40 0 0 0 90 50A40 42 0 0 1 10 50" fill="#e15b64" stroke="none">
  <animateTransform attributeName="transform" type="rotate" dur="1s" repeatCount="indefinite" keyTimes="0;1" values="0 50 51;360 50 51"></animateTransform>
</path>
<!-- [ldio] generated by https://loading.io/ --></svg>
           `
            this.containerTarget.innerHTML = this.urlValue;
            console.log(this.containerTarget)
        }
    }

    loadingValueChanged() {
        const cls = this.loadingValue ? 'inline-block' : 'none'
        console.log(cls);
        this.containerTarget.style.display = cls;
    }

    toggle() {
        this.loadingValue = !this.loadingValue;
    }

    loading() {
        this.loadingValue = true;
    }

    loaded() {
        this.loadingValue = false;
    }
}
